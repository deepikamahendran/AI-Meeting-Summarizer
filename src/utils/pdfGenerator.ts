import jsPDF from 'jspdf';
import { Meeting, MeetingAnalysis } from '../types';

export class PDFGenerator {
  static async generateMeetingReport(meeting: Meeting, analysis: MeetingAnalysis): Promise<void> {
    const doc = new jsPDF();
    let yPosition = 20;

    // Header
    doc.setFontSize(20);
    doc.setTextColor(37, 99, 235); // Blue color
    doc.text('AI Meeting Summarizer', 20, yPosition);
    
    yPosition += 10;
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Meeting Analysis Report', 20, yPosition);
    
    yPosition += 20;
    
    // Meeting Details
    doc.setFontSize(14);
    doc.setTextColor(55, 65, 81);
    doc.text('Meeting Details:', 20, yPosition);
    yPosition += 8;
    
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text(`Title: ${meeting.title}`, 25, yPosition);
    yPosition += 6;
    doc.text(`Date: ${meeting.date}`, 25, yPosition);
    yPosition += 6;
    doc.text(`Duration: ${meeting.duration}`, 25, yPosition);
    yPosition += 6;
    doc.text(`Participants: ${meeting.participants.join(', ')}`, 25, yPosition);
    yPosition += 15;

    // Summary
    doc.setFontSize(14);
    doc.setTextColor(55, 65, 81);
    doc.text('Meeting Summary:', 20, yPosition);
    yPosition += 8;
    
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    const summaryLines = doc.splitTextToSize(analysis.summary, 170);
    doc.text(summaryLines, 25, yPosition);
    yPosition += summaryLines.length * 5 + 10;

    // Key Topics
    if (analysis.keyTopics.length > 0) {
      doc.setFontSize(14);
      doc.setTextColor(55, 65, 81);
      doc.text('Key Topics:', 20, yPosition);
      yPosition += 8;
      
      doc.setFontSize(11);
      doc.setTextColor(0, 0, 0);
      analysis.keyTopics.forEach(topic => {
        doc.text(`• ${topic}`, 25, yPosition);
        yPosition += 6;
      });
      yPosition += 10;
    }

    // Check if we need a new page
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    // Action Items
    if (analysis.actionItems.length > 0) {
      doc.setFontSize(14);
      doc.setTextColor(55, 65, 81);
      doc.text('Action Items:', 20, yPosition);
      yPosition += 8;
      
      analysis.actionItems.forEach(item => {
        doc.setFontSize(11);
        doc.setTextColor(0, 0, 0);
        
        // Priority indicator
        const priorityColor = item.priority === 'High' ? [239, 68, 68] :
                             item.priority === 'Medium' ? [245, 158, 11] : [34, 197, 94];
        doc.setTextColor(priorityColor[0], priorityColor[1], priorityColor[2]);
        doc.text(`[${item.priority}]`, 25, yPosition);
        
        doc.setTextColor(0, 0, 0);
        const descriptionLines = doc.splitTextToSize(item.description, 140);
        doc.text(descriptionLines, 55, yPosition);
        
        yPosition += Math.max(descriptionLines.length * 5, 6) + 2;
      });
      yPosition += 10;
    }

    // Check if we need a new page
    if (yPosition > 220) {
      doc.addPage();
      yPosition = 20;
    }

    // Tasks
    if (analysis.tasks.length > 0) {
      doc.setFontSize(14);
      doc.setTextColor(55, 65, 81);
      doc.text('Task Assignments:', 20, yPosition);
      yPosition += 8;
      
      analysis.tasks.forEach(task => {
        doc.setFontSize(11);
        doc.setTextColor(0, 0, 0);
        
        const taskLines = doc.splitTextToSize(task.description, 120);
        doc.text(taskLines, 25, yPosition);
        
        doc.text(`Assignee: ${task.assignee}`, 25, yPosition + taskLines.length * 5 + 2);
        doc.text(`Due: ${task.dueDate}`, 25, yPosition + taskLines.length * 5 + 8);
        
        // Priority
        const priorityColor = task.priority === 'High' ? [239, 68, 68] :
                             task.priority === 'Medium' ? [245, 158, 11] : [34, 197, 94];
        doc.setTextColor(priorityColor[0], priorityColor[1], priorityColor[2]);
        doc.text(task.priority, 150, yPosition);
        doc.setTextColor(0, 0, 0);
        
        yPosition += taskLines.length * 5 + 18;
      });
    }

    // Next Steps
    if (analysis.nextSteps.length > 0) {
      yPosition += 10;
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFontSize(14);
      doc.setTextColor(55, 65, 81);
      doc.text('Next Steps:', 20, yPosition);
      yPosition += 8;
      
      doc.setFontSize(11);
      doc.setTextColor(0, 0, 0);
      analysis.nextSteps.forEach(step => {
        doc.text(`• ${step}`, 25, yPosition);
        yPosition += 6;
      });
    }

    // Footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(128, 128, 128);
      doc.text(`Generated by AI Meeting Summarizer - Page ${i} of ${pageCount}`, 20, 285);
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 292);
    }

    // Save the PDF
    const filename = `meeting-summary-${meeting.title.replace(/[^a-zA-Z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(filename);
  }
}